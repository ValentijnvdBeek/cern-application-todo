package ch.cern.todo.controllers;

import ch.cern.todo.entities.TaskCategory;
import ch.cern.todo.errors.BadRequestException;
import ch.cern.todo.errors.NotFoundException;
import ch.cern.todo.repositories.TaskCategoryRepository;

import java.util.List;
import java.util.Objects;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.web.bind.annotation.*;


@RestController
public class CategoryController {
    @Autowired
    private transient TaskCategoryRepository categoryRepository;

    final transient String prelude = "/v1";

    @GetMapping("/")
    public String index() {
        return "Hello world!";
    }

    /**
     * Gets the category by an unique name.
     */
    @GetMapping(prelude + "/categories/name/{name}")
    public TaskCategory getCategoryByName(@PathVariable("name") String name) {
        return categoryRepository.findByCategoryName(name);
    }

    /**
     * Gets the category by an unique auto-generated id.
     */
    @GetMapping(prelude + "/categories/{id}")
    public TaskCategory getCategoryById(@PathVariable("id") Long id) throws NotFoundException {
        Optional<TaskCategory> byId = categoryRepository.findById(id);
        if (byId.isEmpty()) {
            throw new NotFoundException("Id " + id + " not found in database.");
        }

        return byId.get();
    }

    /**
     * Creates a category using an autogenerated id. This function
     * requires categoryName to be given.
     */
    @PostMapping(prelude + "/categories")
    public TaskCategory createCategory(@RequestBody TaskCategory category)
        throws BadRequestException {
        // An empty category does not make sense to order items. This is also
        // ensured by the database, but by checking this early we can easily
        // give an easily readable error message.
        if (category.getCategoryName() == null || category.getCategoryName().equals("")) {
            throw new BadRequestException("categoryName cannot be empty or null");
        }

        try {
            categoryRepository.save(category);
        } catch (DataIntegrityViolationException ex) {
            throw new BadRequestException("Cannot create category " + category.getCategoryName()
                                          + " already taken");
        }

        return category;
    }

    /**
     * Gets all the known categories from the database independent of value.
     */
    @GetMapping(prelude + "/categories")
    public List<TaskCategory> getCategories() {
        return categoryRepository.findAll();
    }

    /**
     * Deletes a category on a by id basis. This could be a by name
     * function, but by doing it by id requires one additional API
     * call. This provides one additional layer of deliberate action
     * before any data can be deleted. */
    @DeleteMapping(prelude + "/categories/{id}")
    public String deleteCategoryById(@PathVariable("id") Long id) throws NotFoundException {
        String msg;
        try {
            categoryRepository.deleteById(id);
        } catch (EmptyResultDataAccessException ex) {
            throw new NotFoundException("Category " + id + " cannot be found");
        }
        return "Successfully deleted category: " + id;
    }

    /**
     * Updates a category based on the id. This function requires that the non-null elements are
     * given. This method is null-safe for optional items or, in other words, it actively avoids
     * clobbering valid items if a typing mistake is made.
     */
    @SuppressWarnings("PMD.DataflowAnomalyAnalysis")
    @PutMapping(prelude + "/categories")
    public TaskCategory updateCategory(@RequestBody TaskCategory category)
        throws BadRequestException {
        if (category.getId() == null) {
            throw new BadRequestException("id cannot be null.");
        }

        Optional<TaskCategory> optional = categoryRepository.findById(category.getId());
        if (optional.isEmpty()) {
            throw new BadRequestException("category with id "
                                          + category.getId()
                                          + " does not exist.");
        }

        // Triggers a false positive of PMD's DataflowAnomalyCheck
        TaskCategory tc = optional.get();

        // This is a bit defensive since categoryName MUST be set, but
        // this gives us some additional security if we change our
        // definition. Basically, this tactic avoids accidentally
        // overwriting a non-null element. You can still set the value
        // manually to null by passing the empty string.
        if (category.getCategoryName() == null) {
            category.setCategoryName(tc.getCategoryName());
        }

        if (category.getCategoryDescription() == null) {
            category.setCategoryDescription(tc.getCategoryDescription());
        }

        categoryRepository.save(category);
        return category;
    }
}
